// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DB_URL")
}

model Version {
  id              String   @id @default(uuid())
  code            String // KT2011, ESV, NIV
  name            String // Full name
  language        String // vi, en, es
  source          String // bible.com, biblegateway.com
  formatType      String // web, pdf, audio, api
  sourceUrl       String // Original crawl URL
  hasOldTestament Boolean  @default(true)
  hasNewTestament Boolean  @default(true)
  hasApocrypha    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  books           Book[]

  @@unique([code, language, source, formatType])
  @@index([language])
  @@index([source])
  @@index([formatType]) // Query by format type
  @@map("version")
}

model Book {
  id        String    @id @default(uuid())
  code      String // gen, exo, mt, mk
  name      String // Genesis, Exodus, Matthew, Mark
  testament String // ot, nt, apocrypha
  bookOrder Int // Starts from 1
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  versionId String
  version   Version   @relation(fields: [versionId], references: [id])
  chapters  Chapter[]

  @@unique([code, versionId])
  @@index([versionId, bookOrder])
  @@index([testament]) // Query by Old/New Testament
  @@index([versionId, testament]) // Combined queries
  @@map("book")
}

model Chapter {
  id            String          @id @default(uuid())
  number        Int // Starts from 1
  audioUrl      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  bookId        String
  book          Book            @relation(fields: [bookId], references: [id])
  marks         Mark[]
  headings      Heading[]
  verses        Verse[]
  psalmMetadata PsalmMetadata[] // Psalm instrument/musical directions

  @@unique([bookId, number])
  @@map("chapter")
}

model Verse {
  id              String    @id @default(uuid())
  number          Int // Starts from 1
  subVerseIndex   Int       @default(0) // For 1a, 1b verses. Starts from 0
  text            String
  paragraphNumber Int       @default(0) // Which paragraph this verse belongs to. Starts from 0
  paragraphIndex  Int       @default(0) // Index within the paragraph. Starts from 0
  isPoetry        Boolean   @default(false)
  audioUrl        String?
  label           String // Verse labels like "1a", "1b", "1c"
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  chapterId       String
  headings        Heading[]
  chapter         Chapter   @relation(fields: [chapterId], references: [id])

  @@unique([number, subVerseIndex, chapterId])
  @@index([chapterId, isPoetry]) // Query poetry verses
  @@index([chapterId, paragraphNumber]) // Query by paragraph
  @@map("verse")
}

model Mark {
  id          String   @id @default(uuid())
  kind        String   @default("footnote") // footnote, cross-reference
  label       String // a, b, c, 1, 2, 3, *
  content     String
  sortOrder   Int      @default(0) // Starts from 0
  startOffset Int // Starts from 0
  endOffset   Int // Exclusive end
  chapterId   String
  targetId    String // Attached to specific verse
  targetType  String // "verse" or "heading"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  chapter     Chapter  @relation(fields: [chapterId], references: [id])

  @@unique([sortOrder, targetId, kind])
  @@index([chapterId, sortOrder])
  @@index([chapterId, kind]) // Query by kind
  @@map("mark")
}

model Heading {
  id        String   @id @default(uuid())
  text      String
  level     Int      @default(1) // Starts from 1
  sortOrder Int      @default(0) // Position within chapter. Starts from 0
  chapterId String
  verseId   String // Required: attached to specific verse
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  verse     Verse    @relation(fields: [verseId], references: [id])

  @@unique([sortOrder, verseId])
  @@index([chapterId, level]) // Query by heading level
  @@map("heading")
}

model PsalmMetadata {
  id        String   @id @default(uuid())
  text      String
  sortOrder Int      @default(0) // Starts from 0
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id])

  @@unique([sortOrder, chapterId])
  @@map("psalm_metadata")
}

model SchemaMigrations {
  version BigInt  @id
  dirty   Boolean

  @@map("schema_migrations")
}
