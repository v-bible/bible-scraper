// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DB_URL")
}

model Version {
  id            String          @id @default(uuid())
  code          String
  name          String
  onlyNT        Boolean         @default(false)
  onlyOT        Boolean         @default(false)
  withApocrypha Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  languageId    String
  books         Book[]
  language      VersionLanguage @relation(fields: [languageId], references: [id])
  formats       VersionFormat[]

  @@unique([code, languageId])
  @@map("version")
}

model VersionFormat {
  id        String   @id @default(uuid())
  type      String
  ref       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  versionId String
  version   Version  @relation(fields: [versionId], references: [id])

  @@unique([type, ref])
  @@map("version_format")
}

model VersionLanguage {
  id        String    @id @default(uuid())
  code      String
  name      String
  webOrigin String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  versions  Version[]

  @@unique([code, webOrigin])
  @@map("version_language")
}

model Book {
  id        String        @id @default(uuid())
  code      String
  title     String
  canon     String
  order     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  versionId String
  version   Version       @relation(fields: [versionId], references: [id])
  chapters  BookChapter[]

  @@unique([code, versionId])
  @@map("book")
}

model BookChapter {
  id            String          @id @default(uuid())
  number        Int
  ref           String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  bookId        String
  book          Book            @relation(fields: [bookId], references: [id])
  footnotes     BookFootnote[]
  headings      BookHeading[]
  references    BookReference[]
  verses        BookVerse[]
  psalmMetadata PsalmMetadata?

  @@unique([number, bookId])
  @@map("book_chapter")
}

model BookVerse {
  id         String          @id @default(uuid())
  number     Int
  content    String
  order      Int
  parNumber  Int
  parIndex   Int
  isPoetry   Boolean         @default(false)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now())
  chapterId  String
  footnotes  BookFootnote[]
  headings   BookHeading[]
  references BookReference[]
  chapter    BookChapter     @relation(fields: [chapterId], references: [id])

  @@unique([number, order, chapterId])
  @@map("book_verse")
}

model BookFootnote {
  id        String       @id @default(uuid())
  content   String
  position  Int
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  verseId   String?
  headingId String?
  chapterId String
  chapter   BookChapter  @relation(fields: [chapterId], references: [id])
  verse     BookVerse?   @relation(fields: [verseId], references: [id])
  heading   BookHeading? @relation(fields: [headingId], references: [id])

  @@unique([order, verseId])
  @@unique([order, headingId])
  @@map("book_footnote")
}

model BookHeading {
  id         String          @id @default(uuid())
  content    String
  level      Int             @default(0)
  order      Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now())
  verseId    String
  chapterId  String
  chapter    BookChapter     @relation(fields: [chapterId], references: [id])
  verse      BookVerse       @relation(fields: [verseId], references: [id])
  footnotes  BookFootnote[]
  references BookReference[]

  @@unique([order, verseId])
  @@map("book_heading")
}

model BookReference {
  id        String       @id @default(uuid())
  content   String
  position  Int          @default(0)
  order     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  verseId   String?
  headingId String?
  chapterId String
  chapter   BookChapter  @relation(fields: [chapterId], references: [id])
  verse     BookVerse?   @relation(fields: [verseId], references: [id])
  heading   BookHeading? @relation(fields: [headingId], references: [id])

  @@unique([order, verseId])
  @@unique([order, headingId])
  @@map("book_reference")
}

model PsalmMetadata {
  id        String      @id @default(uuid())
  title     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  chapterId String      @unique
  chapter   BookChapter @relation(fields: [chapterId], references: [id])

  @@map("psalm_metadata")
}

model SchemaMigrations {
  version BigInt  @id
  dirty   Boolean

  @@map("schema_migrations")
}
